= Size of Randomizers in BIP-340 Batch Verification =

'''Lemma:''' For public keys ''pk<sub>1..u</sub>'', messages ''m<sub>1..u</sub>'', signatures ''sig<sub>1..u</sub>'', the probability that ''BatchVerify(pk<sub>1..u</sub>, m<sub>1..u</sub>, sig<sub>1..u</sub>)'' with uniform 128-bit randomizers succeeds and there exists ''i'' in range ''1..u'' such that ''Verify(pk<sub>i</sub>, m<sub>i</sub>, sig<sub>i</sub>)'' fails is not more than 2<sup>-128</sup>.

''Proof:'' For ''i = 1 .. u'', let
* ''P<sub>i</sub> := lift_x(int(pk<sub>i</sub>))'',
* ''r<sub>i</sub> := int(sig[0:32])'',
* ''R<sub>i</sub> := lift_x(r<sub>i</sub>)'',
* ''s<sub>i</sub> := int(sig[32:64])''.

If there exists an ''i'' such that ''lift_x'' for ''P<sub>i</sub>'' or ''R<sub>i</sub>'' fails or ''r<sub>i</sub> &ge; p'' or ''s<sub>i</sub> &ge; n'', then both ''Verify(pk<sub>i</sub>, m<sub>i</sub>, sig<sub>i</sub>)'' and ''BatchVerify(pk<sub>1..u</sub>, m<sub>1..u</sub>, sig<sub>1..u</sub>)'' fail.

Otherwise ''Verify(pk<sub>i</sub>, m<sub>i</sub>, sig<sub>i</sub>)'' fails if and only if ''C<sub>i</sub> := s<sub>i</sub>⋅G - R<sub>i</sub> - e<sub>i</sub>⋅P<sub>i</sub> &ne; 0''.
We let ''c<sub>i</sub>'' be the discrete logarithm of ''C<sub>i</sub>'' with respect to a fixed group generator and define the polynomial ''f<sub>u</sub>(a<sub>2</sub>, ..., a<sub>u</sub>) = c<sub>1</sub> + a<sub>2</sub>c<sub>2</sub> + .... + a<sub>u</sub>c<sub>u</sub>''.
''BatchVerify'' succeeds if and only if ''f<sub>u</sub>'' evaluated on uniform randomizers ''a<sub>2</sub>, ..., a<sub>u</sub>'' is 0.
Assume there exists ''i'' in range ''1..u'' such that ''Verify(pk<sub>i</sub>, m<sub>i</sub>, sig<sub>i</sub>)'' fails. Then ''f<sub>u</sub>'' is not the zero polynomial and by the [https://en.wikipedia.org/wiki/Schwartz%E2%80%93Zippel_lemma Schwartz–Zippel lemma], we have ''f<sub>u</sub>(a<sub>2</sub>, ..., a<sub>u</sub>) &le; 2<sup>-128</sup>''. QED.